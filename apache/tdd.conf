#test domain config

LoadModule passenger_module /home/testing/.rbenv/versions/2.3.0/lib/ruby/gems/2.3.0/gems/passenger-5.1.2/buildout/apache2/mod_passenger.so
LoadModule ssl_module libexec/apache2/mod_ssl.so

<IfModule mod_passenger.c>
    PassengerRoot /home/testing/.rbenv/versions/2.3.0/lib/ruby/gems/2.3.0/gems/passenger-5.1.2
    PassengerDefaultRuby /home/testing/.rbenv/versions/2.3.0/bin/ruby
</IfModule>

<IfModule mod_ssl.c>
    Listen 443 https
    SSLPassPhraseDialog exec:/usr/libexec/httpd-ssl-pass-dialog

    SSLSessionCache         shmcb:/run/httpd/sslcache(512000)
    SSLSessionCacheTimeout  300

    SSLRandomSeed startup file:/dev/urandom  256
    SSLRandomSeed connect builtin

    SSLCryptoDevice builtin
</IfModule>

NameVirtualHost *:80
NameVirtualHost *:443

# handle Apache connection to Passenger
<VirtualHost *:80>
    # define server details
    ServerName test-domain.com
    ServerAlias www.test-domain.com

    # be sure to point to 'public'!
    DocumentRoot /home/testing/vacols/vahs/public

    PassengerRuby /home/testing/.rbenv/versions/2.3.0/bin/ruby

    # run in dev mode
    RackEnv development

    # some passenger config details
    PassengerMinInstances 1
    PassengerPreStart http://test-domain.com/
    PassengerHighPerformance on
    <Directory "/home/testing/vacols/vahs/public">
        Options -MultiViews
        Require all granted
        Allow from all
    </Directory>
</VirtualHost>

# Provide an HTTPS entry point as well but one that will not spin up a second rails instance
# but rather redirect traffic accordingly
<VirtualHost _default_:443>
    # to run in dev mode
    RailsEnv development

    # Be sure to point to 'public'!
    DocumentRoot /home/testing/vacols/vahs/public

    # define server details
    ServerName test-domain.com
    ServerAlias www.test-domain.com

    # ssl details
    SSLEngine on
    SSLProtocol all -SSLv2
    SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL

    SSLCertificateFile /etc/pki/tls/certs/server.crt
    SSLCertificateKeyFile /etc/ssl/certs/server.key

    #SSLCACertificateFile /etc/pki/tls/certs/vaca_fullpath.pem
    #SSLVerifyClient require
    #SSLVerifyDepth  3
    #SSLOptions +FakeBasicAuth
    # rails needs the header for its own processing
    RequestHeader set X_FORWARDED_PROTO 'https'

    # this is just passing a proxy to a localhost server
    ProxyRequests Off
    ProxyPreserveHost On
    <Proxy *>
        Order deny,allow
        Allow from all
    </Proxy>
    ProxyPass / http://localhost/
    ProxyPassReverse / http://localhost/

    BrowserMatch "MSIE [2-5]" \
         nokeepalive ssl-unclean-shutdown \
         downgrade-1.0 force-response-1.0

#   Per-Server Logging:
#   The home of a custom SSL log file. Use this when you want a
#   compact non-error SSL logfile on a virtual host basis.
    CustomLog /var/log/httpd/ssl_request_log \
          "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"
    CustomLog /var/log/httpd/ssl_login_log \
	  "%t %h %{SSL_CLIENT_S_DN}x %{SSL_CLIENT_SAN_Email_n}x"

    #ErrorLog logs/ssl_engine_log
    #LogLevel Debug

</VirtualHost>
